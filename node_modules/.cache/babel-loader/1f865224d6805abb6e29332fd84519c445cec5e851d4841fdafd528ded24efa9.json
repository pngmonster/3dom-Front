{"ast":null,"code":"// src/hooks/useMessages.ts\nimport{useState,useEffect,useCallback}from'react';import{getMessages,createMessage,getMessage}from'../api/messages';import{transformMessageOut,transformMessages}from'../utils/transform';export function useMessages(chatId){const[messages,setMessages]=useState([]);const[loading,setLoading]=useState(false);const[error,setError]=useState(null);useEffect(()=>{fetchMessages();},[chatId]);const fetchMessages=async()=>{try{if(!chatId){return;}const res=await getMessages(chatId);const trans=transformMessages(res);setMessages(trans);}catch(err){console.error('Ошибка при получении чатов:',err);setMessages([]);}finally{setLoading(false);}};const send=useCallback(async msg=>{const newID=await createMessage(msg);const newMsg=await getMessage(newID);const newTransformed=transformMessageOut(newMsg);setMessages(prev=>[...prev,newTransformed]);return newTransformed;// ✅ лучше использовать это, чем надеяться на messages\n},[]);return{messages,setMessages,loading,error,send,fetchMessages};}export function useStreamMessage(chatId){const{send}=useMessages(chatId);const[chunks,setChunks]=useState([]);const[error,setError]=useState(null);const start=useCallback(id=>{return new Promise((resolve,reject)=>{setChunks([]);setError(null);const buffer=[];const evtSource=new EventSource(`https://giicoo.ru/api/message-service/stream?id=${encodeURIComponent(id)}`);evtSource.onmessage=e=>{if(e.data===\"[DONE]\"){evtSource.close();const fullText=buffer.join('');resolve(fullText);// ✅ возвращаем все чанки как одну строку\nreturn;}buffer.push(e.data);setChunks(prev=>[...prev,e.data]);};evtSource.onerror=e=>{setError('Stream error');evtSource.close();reject(new Error('Stream error'));};});},[]);return{chunks,error,start};}","map":{"version":3,"names":["useState","useEffect","useCallback","getMessages","createMessage","getMessage","transformMessageOut","transformMessages","useMessages","chatId","messages","setMessages","loading","setLoading","error","setError","fetchMessages","res","trans","err","console","send","msg","newID","newMsg","newTransformed","prev","useStreamMessage","chunks","setChunks","start","id","Promise","resolve","reject","buffer","evtSource","EventSource","encodeURIComponent","onmessage","e","data","close","fullText","join","push","onerror","Error"],"sources":["/home/giicoo/projects/3DOM FRONT/3dom-Front/src/hooks/useMessages.ts"],"sourcesContent":["// src/hooks/useMessages.ts\nimport { useState, useEffect, useCallback } from 'react';\nimport {\n  getMessages,\n  createMessage,\n  getMessage,\n} from '../api/messages';\nimport { MessageIn, MessageOut } from '../api/types';\nimport { Message } from '../types';\nimport { transformMessageOut, transformMessages } from '../utils/transform';\n\nexport function useMessages(chatId: string | null) {\n  const [messages, setMessages] = useState<Message[]>([]);\n  const [loading, setLoading] = useState<boolean>(false);\n  const [error, setError] = useState<string | null>(null);\n  \n\n  useEffect(() => {\n    fetchMessages()\n  }, [chatId]);\n\n  const fetchMessages = async () => {\n      try {\n        if (!chatId) { return; }\n        const res = await getMessages(chatId);\n        const trans = transformMessages(res)\n        setMessages(trans);\n\n      } catch (err) {\n        console.error('Ошибка при получении чатов:', err);\n        setMessages([]);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    const send = useCallback(\n      async (msg: MessageIn) => {\n        const newID = await createMessage(msg);\n        const newMsg = await getMessage(newID);\n        const newTransformed = transformMessageOut(newMsg);\n    \n        setMessages(prev => [...prev, newTransformed]);\n    \n        return newTransformed; // ✅ лучше использовать это, чем надеяться на messages\n      },\n      []\n    );\n\n  return { messages, setMessages, loading, error, send, fetchMessages};\n}\n\n\nexport function useStreamMessage(chatId: string | null) {\n  const { send } = useMessages(chatId);\n  const [chunks, setChunks] = useState<string[]>([]);\n  const [error, setError] = useState<string | null>(null);\n\n  const start = useCallback(\n    (id: string): Promise<string> => {\n      return new Promise((resolve, reject) => {\n        setChunks([]);\n        setError(null);\n\n        const buffer: string[] = [];\n\n        const evtSource = new EventSource(\n          `https://giicoo.ru/api/message-service/stream?id=${encodeURIComponent(id)}`\n        );\n\n        evtSource.onmessage = e => {\n          if (e.data === \"[DONE]\") {\n            evtSource.close();\n            const fullText = buffer.join('');\n            resolve(fullText); // ✅ возвращаем все чанки как одну строку\n            return;\n          }\n\n          buffer.push(e.data);\n          setChunks(prev => [...prev, e.data]);\n        };\n\n        evtSource.onerror = e => {\n          setError('Stream error');\n          evtSource.close();\n          reject(new Error('Stream error'));\n        };\n      });\n    },\n    []\n  );\n\n  return { chunks, error, start };\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}