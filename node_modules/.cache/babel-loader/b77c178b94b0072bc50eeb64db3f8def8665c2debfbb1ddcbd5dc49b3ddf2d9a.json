{"ast":null,"code":"// src/hooks/useChats.ts\nimport{useEffect,useState}from'react';import{createChatAuto,deleteChat,getAllChats}from'../api/chat';import{transformChats}from'../utils/transform';export function useChats(telegramId){const[chats,setChats]=useState([]);const[loading,setLoading]=useState(true);useEffect(()=>{fetchChats();},[telegramId]);const fetchChats=async()=>{try{const res=await getAllChats(telegramId);setChats(transformChats(res));}catch(err){console.error('Ошибка при получении чатов:',err);}finally{setLoading(false);}};const createAuto=async(query,payload)=>{try{const res=await createChatAuto(query,payload);await fetchChats();// обновить после создания\nreturn res[\"chat_id\"];}catch(err){console.error('Ошибка при авто-создании чата:',err);return\"1\";}};const delChat=async chat_id=>{try{await deleteChat(chat_id);await fetchChats();// обновить после создания\n}catch(err){console.error('Ошибка при удаление чата:',err);}};return{chats,loading,createAuto,setChats,delChat};}","map":{"version":3,"names":["useEffect","useState","createChatAuto","deleteChat","getAllChats","transformChats","useChats","telegramId","chats","setChats","loading","setLoading","fetchChats","res","err","console","error","createAuto","query","payload","delChat","chat_id"],"sources":["/home/giicoo/projects/3DOM FRONT/3dom-Front/src/hooks/useChats.ts"],"sourcesContent":["// src/hooks/useChats.ts\nimport { useEffect, useState } from 'react';\nimport { createChatAuto, deleteChat, getAllChats, getChat } from '../api/chat';\nimport { Chat } from '../types'\nimport { transformChatOut, transformChats } from '../utils/transform';\nimport { ChatIn } from '../api/types';\n\nexport function useChats(telegramId: number) {\n  const [chats, setChats] = useState<Chat[]>([]);\n  const [loading, setLoading] = useState(true);\n\n\n  useEffect(() => {\n    fetchChats()\n  }, [telegramId]);\n\n  const fetchChats = async () => {\n    try {\n      const res = await getAllChats(telegramId);\n      setChats(transformChats(res));\n    } catch (err) {\n      console.error('Ошибка при получении чатов:', err);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const createAuto = async (query: string, payload: ChatIn): Promise<string>=> {\n    try {\n      const res = await createChatAuto(query, payload);\n      await fetchChats(); // обновить после создания\n      return res[\"chat_id\"];\n    } catch (err) {\n      console.error('Ошибка при авто-создании чата:', err);\n      return \"1\";\n    }\n  };\n\n  const delChat = async (chat_id: string) => {\n    try {\n      await deleteChat(chat_id);\n      await fetchChats(); // обновить после создания\n      \n    } catch (err) {\n      console.error('Ошибка при удаление чата:', err);\n    }\n  };\n\n  return {chats, loading, createAuto, setChats, delChat };\n}\n"],"mappings":"AAAA;AACA,OAASA,SAAS,CAAEC,QAAQ,KAAQ,OAAO,CAC3C,OAASC,cAAc,CAAEC,UAAU,CAAEC,WAAW,KAAiB,aAAa,CAE9E,OAA2BC,cAAc,KAAQ,oBAAoB,CAGrE,MAAO,SAAS,CAAAC,QAAQA,CAACC,UAAkB,CAAE,CAC3C,KAAM,CAACC,KAAK,CAAEC,QAAQ,CAAC,CAAGR,QAAQ,CAAS,EAAE,CAAC,CAC9C,KAAM,CAACS,OAAO,CAAEC,UAAU,CAAC,CAAGV,QAAQ,CAAC,IAAI,CAAC,CAG5CD,SAAS,CAAC,IAAM,CACdY,UAAU,CAAC,CAAC,CACd,CAAC,CAAE,CAACL,UAAU,CAAC,CAAC,CAEhB,KAAM,CAAAK,UAAU,CAAG,KAAAA,CAAA,GAAY,CAC7B,GAAI,CACF,KAAM,CAAAC,GAAG,CAAG,KAAM,CAAAT,WAAW,CAACG,UAAU,CAAC,CACzCE,QAAQ,CAACJ,cAAc,CAACQ,GAAG,CAAC,CAAC,CAC/B,CAAE,MAAOC,GAAG,CAAE,CACZC,OAAO,CAACC,KAAK,CAAC,6BAA6B,CAAEF,GAAG,CAAC,CACnD,CAAC,OAAS,CACRH,UAAU,CAAC,KAAK,CAAC,CACnB,CACF,CAAC,CAED,KAAM,CAAAM,UAAU,CAAG,KAAAA,CAAOC,KAAa,CAAEC,OAAe,GAAqB,CAC3E,GAAI,CACF,KAAM,CAAAN,GAAG,CAAG,KAAM,CAAAX,cAAc,CAACgB,KAAK,CAAEC,OAAO,CAAC,CAChD,KAAM,CAAAP,UAAU,CAAC,CAAC,CAAE;AACpB,MAAO,CAAAC,GAAG,CAAC,SAAS,CAAC,CACvB,CAAE,MAAOC,GAAG,CAAE,CACZC,OAAO,CAACC,KAAK,CAAC,gCAAgC,CAAEF,GAAG,CAAC,CACpD,MAAO,GAAG,CACZ,CACF,CAAC,CAED,KAAM,CAAAM,OAAO,CAAG,KAAO,CAAAC,OAAe,EAAK,CACzC,GAAI,CACF,KAAM,CAAAlB,UAAU,CAACkB,OAAO,CAAC,CACzB,KAAM,CAAAT,UAAU,CAAC,CAAC,CAAE;AAEtB,CAAE,MAAOE,GAAG,CAAE,CACZC,OAAO,CAACC,KAAK,CAAC,2BAA2B,CAAEF,GAAG,CAAC,CACjD,CACF,CAAC,CAED,MAAO,CAACN,KAAK,CAAEE,OAAO,CAAEO,UAAU,CAAER,QAAQ,CAAEW,OAAQ,CAAC,CACzD","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}