{"ast":null,"code":"var _s = $RefreshSig$();\n// src/hooks/useChats.ts\nimport { useEffect, useState } from 'react';\nimport { createChatAuto, getAllChats } from '../api/chat';\nimport { transformChats } from '../utils/chat';\nexport function useChats(telegramId) {\n  _s();\n  const [chats, setChats] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [activeChat, setActiveChat] = useState('1');\n  useEffect(() => {\n    fetchChats();\n  }, [telegramId]);\n  const fetchChats = async () => {\n    try {\n      const res = await getAllChats(telegramId);\n      setChats(transformChats(res));\n    } catch (err) {\n      console.error('Ошибка при получении чатов:', err);\n    } finally {\n      setLoading(false);\n    }\n  };\n  const createAuto = async (query, payload) => {\n    try {\n      const res = await createChatAuto(query, payload);\n      await fetchChats(); // обновить после создания\n\n      return res;\n    } catch (err) {\n      console.error('Ошибка при авто-создании чата:', err);\n    }\n  };\n  return {\n    activeChat,\n    setActiveChat,\n    chats,\n    loading,\n    createAuto,\n    setChats\n  };\n}\n_s(useChats, \"yYQ5rJ1pXHpejgWUhfyTNgVd0d4=\");","map":{"version":3,"names":["useEffect","useState","createChatAuto","getAllChats","transformChats","useChats","telegramId","_s","chats","setChats","loading","setLoading","activeChat","setActiveChat","fetchChats","res","err","console","error","createAuto","query","payload"],"sources":["/home/giicoo/projects/3DOM FRONT/3dom-Front/src/hooks/useChats.ts"],"sourcesContent":["// src/hooks/useChats.ts\nimport { useEffect, useState } from 'react';\nimport { createChatAuto, getAllChats } from '../api/chat';\nimport { Chat } from '../types'\nimport { transformChats } from '../utils/chat';\nimport { ChatIn } from '../api/types';\n\nexport function useChats(telegramId: number) {\n  const [chats, setChats] = useState<Chat[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [activeChat, setActiveChat] = useState<string>('1');\n\n\n  useEffect(() => {\n    fetchChats()\n  }, [telegramId]);\n\n  const fetchChats = async () => {\n    try {\n      const res = await getAllChats(telegramId);\n      setChats(transformChats(res));\n    } catch (err) {\n      console.error('Ошибка при получении чатов:', err);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const createAuto = async (query: string, payload: ChatIn) => {\n    try {\n      const res = await createChatAuto(query, payload);\n      await fetchChats(); // обновить после создания\n      \n      return res;\n    } catch (err) {\n      console.error('Ошибка при авто-создании чата:', err);\n    }\n  };\n\n\n  return {activeChat, setActiveChat, chats, loading, createAuto, setChats };\n}\n"],"mappings":";AAAA;AACA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC3C,SAASC,cAAc,EAAEC,WAAW,QAAQ,aAAa;AAEzD,SAASC,cAAc,QAAQ,eAAe;AAG9C,OAAO,SAASC,QAAQA,CAACC,UAAkB,EAAE;EAAAC,EAAA;EAC3C,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGR,QAAQ,CAAS,EAAE,CAAC;EAC9C,MAAM,CAACS,OAAO,EAAEC,UAAU,CAAC,GAAGV,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAM,CAACW,UAAU,EAAEC,aAAa,CAAC,GAAGZ,QAAQ,CAAS,GAAG,CAAC;EAGzDD,SAAS,CAAC,MAAM;IACdc,UAAU,CAAC,CAAC;EACd,CAAC,EAAE,CAACR,UAAU,CAAC,CAAC;EAEhB,MAAMQ,UAAU,GAAG,MAAAA,CAAA,KAAY;IAC7B,IAAI;MACF,MAAMC,GAAG,GAAG,MAAMZ,WAAW,CAACG,UAAU,CAAC;MACzCG,QAAQ,CAACL,cAAc,CAACW,GAAG,CAAC,CAAC;IAC/B,CAAC,CAAC,OAAOC,GAAG,EAAE;MACZC,OAAO,CAACC,KAAK,CAAC,6BAA6B,EAAEF,GAAG,CAAC;IACnD,CAAC,SAAS;MACRL,UAAU,CAAC,KAAK,CAAC;IACnB;EACF,CAAC;EAED,MAAMQ,UAAU,GAAG,MAAAA,CAAOC,KAAa,EAAEC,OAAe,KAAK;IAC3D,IAAI;MACF,MAAMN,GAAG,GAAG,MAAMb,cAAc,CAACkB,KAAK,EAAEC,OAAO,CAAC;MAChD,MAAMP,UAAU,CAAC,CAAC,CAAC,CAAC;;MAEpB,OAAOC,GAAG;IACZ,CAAC,CAAC,OAAOC,GAAG,EAAE;MACZC,OAAO,CAACC,KAAK,CAAC,gCAAgC,EAAEF,GAAG,CAAC;IACtD;EACF,CAAC;EAGD,OAAO;IAACJ,UAAU;IAAEC,aAAa;IAAEL,KAAK;IAAEE,OAAO;IAAES,UAAU;IAAEV;EAAS,CAAC;AAC3E;AAACF,EAAA,CAlCeF,QAAQ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}