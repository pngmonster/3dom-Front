{"ast":null,"code":"var _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\n// src/hooks/useMessages.ts\nimport { useState, useEffect, useCallback } from 'react';\nimport { getMessages, createMessage, getMessage } from '../api/messages';\nimport { transformMessageOut, transformMessages } from '../utils/transform';\nexport function useMessages(chatId) {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    fetchMessages();\n  }, [chatId]);\n  const fetchMessages = async () => {\n    try {\n      if (!chatId) {\n        return;\n      }\n      const res = await getMessages(chatId);\n      const trans = transformMessages(res);\n      setMessages(trans);\n      console.log(messages);\n    } catch (err) {\n      console.error('Ошибка при получении чатов:', err);\n    } finally {\n      setLoading(false);\n    }\n  };\n  const send = useCallback(async msg => {\n    const newID = await createMessage(msg);\n    const newMsg = await getMessage(newID);\n    setMessages(prev => [...prev, transformMessageOut(newMsg)]);\n    return transformMessageOut(newMsg);\n    console.log(messages);\n  }, []);\n  return {\n    messages,\n    setMessages,\n    loading,\n    error,\n    send,\n    fetchMessages\n  };\n}\n_s(useMessages, \"0b6MivOnjgvvxaUfmHvrwD4Fs9k=\");\nexport function useStreamMessage(chatId) {\n  _s2();\n  const {\n    send\n  } = useMessages(chatId);\n  const [chunks, setChunks] = useState([]);\n  const [error, setError] = useState(null);\n  const start = useCallback(id => {\n    return new Promise((resolve, reject) => {\n      setChunks([]);\n      setError(null);\n      const evtSource = new EventSource(`https://giicoo.ru/api/message-service/stream?id=${encodeURIComponent(id)}`);\n      evtSource.onmessage = e => {\n        if (e.data === \"[DONE]\") {\n          evtSource.close();\n          resolve(); // ✅ Стрим завершён\n          return;\n        }\n        setChunks(prev => [...prev, e.data]);\n      };\n      evtSource.onerror = e => {\n        setError('Stream error');\n        evtSource.close();\n        reject(new Error('Stream error'));\n      };\n    });\n  }, []);\n  return {\n    chunks,\n    error,\n    start\n  };\n}\n_s2(useStreamMessage, \"u1NFL3DdXPEPR0stFcOCMFg3aSE=\", false, function () {\n  return [useMessages];\n});","map":{"version":3,"names":["useState","useEffect","useCallback","getMessages","createMessage","getMessage","transformMessageOut","transformMessages","useMessages","chatId","_s","messages","setMessages","loading","setLoading","error","setError","fetchMessages","res","trans","console","log","err","send","msg","newID","newMsg","prev","useStreamMessage","_s2","chunks","setChunks","start","id","Promise","resolve","reject","evtSource","EventSource","encodeURIComponent","onmessage","e","data","close","onerror","Error"],"sources":["/home/giicoo/projects/3DOM FRONT/3dom-Front/src/hooks/useMessages.ts"],"sourcesContent":["// src/hooks/useMessages.ts\nimport { useState, useEffect, useCallback } from 'react';\nimport {\n  getMessages,\n  createMessage,\n  getMessage,\n} from '../api/messages';\nimport { MessageIn, MessageOut } from '../api/types';\nimport { Message } from '../types';\nimport { transformMessageOut, transformMessages } from '../utils/transform';\n\nexport function useMessages(chatId: string | null) {\n  const [messages, setMessages] = useState<Message[]>([]);\n  const [loading, setLoading] = useState<boolean>(false);\n  const [error, setError] = useState<string | null>(null);\n  \n\n  useEffect(() => {\n    fetchMessages()\n  }, [chatId]);\n\n  const fetchMessages = async () => {\n      try {\n        if (!chatId) { return; }\n        const res = await getMessages(chatId);\n        const trans = transformMessages(res)\n        setMessages(trans);\n        console.log(messages)\n\n      } catch (err) {\n        console.error('Ошибка при получении чатов:', err);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n  const send = useCallback(\n    async (msg: MessageIn) => {\n      const newID = await createMessage(msg);\n      const newMsg = await getMessage(newID)\n      setMessages(prev => [...prev, transformMessageOut(newMsg)]);\n      return transformMessageOut(newMsg);\n      console.log(messages)\n    },\n    []\n  );\n\n  return { messages, setMessages, loading, error, send, fetchMessages};\n}\n\n\nexport function useStreamMessage(chatId: string | null) {\n  const { send } = useMessages(chatId);\n  const [chunks, setChunks] = useState<string[]>([]);\n  const [error, setError] = useState<string | null>(null);\n\n  const start = useCallback(\n    (id: string): Promise<void> => {\n      return new Promise((resolve, reject) => {\n        setChunks([]);\n        setError(null);\n\n        const evtSource = new EventSource(\n          `https://giicoo.ru/api/message-service/stream?id=${encodeURIComponent(id)}`\n        );\n\n        evtSource.onmessage = e => {\n          if (e.data === \"[DONE]\") {\n            evtSource.close();\n            resolve(); // ✅ Стрим завершён\n            return;\n          }\n\n          setChunks(prev => [...prev, e.data]);\n        };\n\n        evtSource.onerror = e => {\n          setError('Stream error');\n          evtSource.close();\n          reject(new Error('Stream error'));\n        };\n      });\n    },\n    []\n  );\n\n  return { chunks, error, start };\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}