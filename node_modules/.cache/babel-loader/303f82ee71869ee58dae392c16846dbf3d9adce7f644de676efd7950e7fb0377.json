{"ast":null,"code":"var _s = $RefreshSig$();\n// src/hooks/useChats.ts\nimport { useEffect, useState } from 'react';\nimport { getAllChats } from '../api/chat';\nimport { transformChats } from '../utils/chat';\nexport function useChats(telegramId) {\n  _s();\n  const [chats, setChats] = useState([]);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    getAllChats(telegramId).then(res => setChats(transformChats(res))) // <-- преобразуем\n    .finally(() => setLoading(false));\n  }, [telegramId]);\n  return {\n    chats,\n    setChats,\n    loading\n  };\n}\n_s(useChats, \"RtCxTJDryflVzjLVpr7zS1FVD/A=\");","map":{"version":3,"names":["useEffect","useState","getAllChats","transformChats","useChats","telegramId","_s","chats","setChats","loading","setLoading","then","res","finally"],"sources":["/home/giicoo/projects/3DOM FRONT/3dom-Front/src/hooks/useChats.ts"],"sourcesContent":["// src/hooks/useChats.ts\nimport { useEffect, useState } from 'react';\nimport { getAllChats } from '../api/chat';\nimport { Chat } from '../types'\nimport { transformChats } from '../utils/chat';\n\nexport function useChats(telegramId: number) {\n  const [chats, setChats] = useState<Chat[]>([]);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    getAllChats(telegramId)\n      .then(res => setChats(transformChats(res))) // <-- преобразуем\n      .finally(() => setLoading(false));\n  }, [telegramId]);\n\n\n\n  return { chats, setChats, loading };\n}\n"],"mappings":";AAAA;AACA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC3C,SAASC,WAAW,QAAQ,aAAa;AAEzC,SAASC,cAAc,QAAQ,eAAe;AAE9C,OAAO,SAASC,QAAQA,CAACC,UAAkB,EAAE;EAAAC,EAAA;EAC3C,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGP,QAAQ,CAAS,EAAE,CAAC;EAC9C,MAAM,CAACQ,OAAO,EAAEC,UAAU,CAAC,GAAGT,QAAQ,CAAC,IAAI,CAAC;EAE5CD,SAAS,CAAC,MAAM;IACdE,WAAW,CAACG,UAAU,CAAC,CACpBM,IAAI,CAACC,GAAG,IAAIJ,QAAQ,CAACL,cAAc,CAACS,GAAG,CAAC,CAAC,CAAC,CAAC;IAAA,CAC3CC,OAAO,CAAC,MAAMH,UAAU,CAAC,KAAK,CAAC,CAAC;EACrC,CAAC,EAAE,CAACL,UAAU,CAAC,CAAC;EAIhB,OAAO;IAAEE,KAAK;IAAEC,QAAQ;IAAEC;EAAQ,CAAC;AACrC;AAACH,EAAA,CAbeF,QAAQ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}